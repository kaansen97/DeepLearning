{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PxlI-1V0VyYJ"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import math\n",
        "import time\n",
        "from tqdm import tqdm\n",
        "import random\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset\n",
        "from torch.utils.data import DataLoader"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YoXxTJHJhTNk",
        "outputId": "38a72a9d-c62a-4787-bc94-82467c4960bd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QE2d0XWuV8D6"
      },
      "outputs": [],
      "source": [
        "class Vocabulary:\n",
        "\n",
        "    def __init__(self, pad_token=\"<pad>\", unk_token='<unk>', eos_token='<eos>', sos_token='<sos>'):\n",
        "        self.id_to_string = {}\n",
        "        self.string_to_id = {}\n",
        "\n",
        "        # add the default pad token\n",
        "        self.id_to_string[0] = pad_token\n",
        "        self.string_to_id[pad_token] = 0\n",
        "\n",
        "        # add the default unknown token\n",
        "        self.id_to_string[1] = unk_token\n",
        "        self.string_to_id[unk_token] = 1\n",
        "\n",
        "        # add the default unknown token\n",
        "        self.id_to_string[2] = eos_token\n",
        "        self.string_to_id[eos_token] = 2\n",
        "\n",
        "        # add the default unknown token\n",
        "        self.id_to_string[3] = sos_token\n",
        "        self.string_to_id[sos_token] = 3\n",
        "\n",
        "        # shortcut access\n",
        "        self.pad_id = 0\n",
        "        self.unk_id = 1\n",
        "        self.eos_id = 2\n",
        "        self.sos_id = 3\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.id_to_string)\n",
        "\n",
        "    def add_new_word(self, string):\n",
        "        self.string_to_id[string] = len(self.string_to_id)\n",
        "        self.id_to_string[len(self.id_to_string)] = string\n",
        "\n",
        "    # Given a string, return ID\n",
        "    # if extend_vocab is True, add the new word\n",
        "    def get_idx(self, string, extend_vocab=False):\n",
        "        if string in self.string_to_id:\n",
        "            return self.string_to_id[string]\n",
        "        elif extend_vocab:  # add the new word\n",
        "            self.add_new_word(string)\n",
        "            return self.string_to_id[string]\n",
        "        else:\n",
        "            return self.unk_id\n",
        "\n",
        "\n",
        "# Read the raw txt file and generate a 1D pytorch tensor\n",
        "# containing the whole text mapped to sequence of token ID,\n",
        "# and a vocab file\n",
        "class ParallelTextDataset(Dataset):\n",
        "\n",
        "    def __init__(self, src_file_path, trg_file_path, src_vocab=None,\n",
        "                 trg_vocab=None, extend_vocab=False, device='cuda'):\n",
        "        (self.data, self.src_vocab, self.trg_vocab,\n",
        "         self.src_max_seq_length, self.tgt_max_seq_length) = self.parallel_text_to_data(\n",
        "            src_file_path, trg_file_path, src_vocab, trg_vocab, extend_vocab, device)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        return self.data[idx]\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def parallel_text_to_data(self, src_file, tgt_file, src_vocab=None, tgt_vocab=None,\n",
        "                          extend_vocab=False, device='cuda'):\n",
        "        # Convert paired src/tgt texts into torch.tensor data.\n",
        "        # All sequences are padded to the length of the longest sequence\n",
        "        # of the respective file.\n",
        "\n",
        "        assert os.path.exists(src_file)\n",
        "        assert os.path.exists(tgt_file)\n",
        "\n",
        "        if src_vocab is None:\n",
        "            src_vocab = Vocabulary()\n",
        "\n",
        "        if tgt_vocab is None:\n",
        "            tgt_vocab = Vocabulary()\n",
        "\n",
        "        data_list = []\n",
        "        # Check the max length, if needed construct vocab file.\n",
        "        src_max = 0\n",
        "        with open(src_file, 'r') as text:\n",
        "            for line in text:\n",
        "                tokens = list(line)\n",
        "                length = len(tokens)\n",
        "                if src_max < length:\n",
        "                    src_max = length\n",
        "\n",
        "        tgt_max = 0\n",
        "        with open(tgt_file, 'r') as text:\n",
        "            for line in text:\n",
        "                tokens = list(line)\n",
        "                length = len(tokens)\n",
        "                if tgt_max < length:\n",
        "                    tgt_max = length\n",
        "        tgt_max += 2  # add for begin/end tokens\n",
        "\n",
        "        src_pad_idx = src_vocab.pad_id\n",
        "        tgt_pad_idx = tgt_vocab.pad_id\n",
        "\n",
        "        tgt_eos_idx = tgt_vocab.eos_id\n",
        "        tgt_sos_idx = tgt_vocab.sos_id\n",
        "\n",
        "        # Construct data\n",
        "        src_list = []\n",
        "        print(f\"Loading source file from: {src_file}\")\n",
        "        with open(src_file, 'r') as text:\n",
        "            for line in tqdm(text):\n",
        "                seq = []\n",
        "                tokens = list(line)\n",
        "                for token in tokens:\n",
        "                    seq.append(src_vocab.get_idx(token, extend_vocab=extend_vocab))\n",
        "                var_len = len(seq)\n",
        "                var_seq = torch.tensor(seq, device=device, dtype=torch.int64)\n",
        "                # padding\n",
        "                new_seq = var_seq.data.new(src_max).fill_(src_pad_idx)\n",
        "                new_seq[:var_len] = var_seq\n",
        "                src_list.append(new_seq)\n",
        "\n",
        "        tgt_list = []\n",
        "        print(f\"Loading target file from: {tgt_file}\")\n",
        "        with open(tgt_file, 'r') as text:\n",
        "            for line in tqdm(text):\n",
        "                seq = []\n",
        "                tokens = list(line)\n",
        "                # append a start token\n",
        "                seq.append(tgt_sos_idx)\n",
        "                for token in tokens:\n",
        "                    seq.append(tgt_vocab.get_idx(token, extend_vocab=extend_vocab))\n",
        "                # append an end token\n",
        "                seq.append(tgt_eos_idx)\n",
        "\n",
        "                var_len = len(seq)\n",
        "                var_seq = torch.tensor(seq, device=device, dtype=torch.int64)\n",
        "\n",
        "                # padding\n",
        "                new_seq = var_seq.data.new(tgt_max).fill_(tgt_pad_idx)\n",
        "                new_seq[:var_len] = var_seq\n",
        "                tgt_list.append(new_seq)\n",
        "\n",
        "        # src_file and tgt_file are assumed to be aligned.\n",
        "        assert len(src_list) == len(tgt_list)\n",
        "        for i in range(len(src_list)):\n",
        "            data_list.append((src_list[i], tgt_list[i]))\n",
        "\n",
        "        print(\"Done.\")\n",
        "\n",
        "        return data_list, src_vocab, tgt_vocab, src_max, tgt_max\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cDswlNAQyuHB",
        "outputId": "fa55c3b2-51ca-43bc-c0c3-af9641bd0d97"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Loading source file from: /content/drive/MyDrive/Colab Notebooks/Assignment 4/comparison__sort/train.x\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "1999998it [02:20, 14213.73it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Loading target file from: /content/drive/MyDrive/Colab Notebooks/Assignment 4/comparison__sort/train.y\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "1999998it [02:12, 15082.79it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Done.\n",
            "Loading source file from: /content/drive/MyDrive/Colab Notebooks/Assignment 4/comparison__sort/interpolate.x\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "10000it [00:00, 14505.16it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Loading target file from: /content/drive/MyDrive/Colab Notebooks/Assignment 4/comparison__sort/interpolate.y\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "10000it [00:00, 16116.82it/s]"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Done.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "# `DATASET_DIR` should be modified to the directory where you downloaded the dataset.\n",
        "# DATASET_DIR = \"/kaggle/input/assignment4/numbers__place_value/\"\n",
        "# DATASET_DIR = \"/content/\"\n",
        "DATASET_DIR=\"/content/drive/MyDrive/Colab Notebooks/Assignment 4\"\n",
        "TRAIN_FILE_NAME = \"train\"\n",
        "VALID_FILE_NAME = \"interpolate\"\n",
        "\n",
        "INPUTS_FILE_ENDING = \".x\"\n",
        "TARGETS_FILE_ENDING = \".y\"\n",
        "\n",
        "#TASK = \"numbers__place_value\"\n",
        "# TASK=\"x\"\n",
        "TASK = \"comparison__sort\"\n",
        "# TASK = \"algebra__linear_1d\"\n",
        "\n",
        "# Adapt the paths!\n",
        "\n",
        "src_file_path = f\"{DATASET_DIR}/{TASK}/{TRAIN_FILE_NAME}{INPUTS_FILE_ENDING}\"\n",
        "trg_file_path = f\"{DATASET_DIR}/{TASK}/{TRAIN_FILE_NAME}{TARGETS_FILE_ENDING}\"\n",
        "\n",
        "train_set = ParallelTextDataset(src_file_path, trg_file_path, extend_vocab=True)\n",
        "\n",
        "# get the vocab\n",
        "src_vocab = train_set.src_vocab\n",
        "trg_vocab = train_set.trg_vocab\n",
        "\n",
        "src_file_path = f\"{DATASET_DIR}/{TASK}/{VALID_FILE_NAME}{INPUTS_FILE_ENDING}\"\n",
        "trg_file_path = f\"{DATASET_DIR}/{TASK}/{VALID_FILE_NAME}{TARGETS_FILE_ENDING}\"\n",
        "\n",
        "valid_set = ParallelTextDataset(\n",
        "    src_file_path, trg_file_path, src_vocab=src_vocab, trg_vocab=trg_vocab,\n",
        "    extend_vocab=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xuB1K0TAyuHC"
      },
      "outputs": [],
      "source": [
        "batch_size = 64\n",
        "\n",
        "train_data_loader = DataLoader(\n",
        "    dataset=train_set, batch_size=batch_size, shuffle=True)\n",
        "\n",
        "valid_data_loader = DataLoader(\n",
        "    dataset=valid_set, batch_size=batch_size, shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkXJ4OljyuHC",
        "outputId": "1257a597-53e8-4b92-caed-36871f481864"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{0: '<pad>',\n",
              " 1: '<unk>',\n",
              " 2: '<eos>',\n",
              " 3: '<sos>',\n",
              " 4: 'P',\n",
              " 5: 'u',\n",
              " 6: 't',\n",
              " 7: ' ',\n",
              " 8: '-',\n",
              " 9: '5',\n",
              " 10: '3',\n",
              " 11: '4',\n",
              " 12: ',',\n",
              " 13: 'i',\n",
              " 14: 'n',\n",
              " 15: 'd',\n",
              " 16: 'e',\n",
              " 17: 's',\n",
              " 18: 'c',\n",
              " 19: 'g',\n",
              " 20: 'o',\n",
              " 21: 'r',\n",
              " 22: '.',\n",
              " 23: '\\n',\n",
              " 24: '1',\n",
              " 25: 'a',\n",
              " 26: '2',\n",
              " 27: '/',\n",
              " 28: '6',\n",
              " 29: '9',\n",
              " 30: '8',\n",
              " 31: 'S',\n",
              " 32: '0',\n",
              " 33: '7'}"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "src_vocab.id_to_string"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JHCn5Gm4yuHC",
        "outputId": "48ea4442-7da8-474c-8efb-ceafc271fdcb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{0: '<pad>',\n",
              " 1: '<unk>',\n",
              " 2: '<eos>',\n",
              " 3: '<sos>',\n",
              " 4: '4',\n",
              " 5: ',',\n",
              " 6: ' ',\n",
              " 7: '3',\n",
              " 8: '-',\n",
              " 9: '5',\n",
              " 10: '\\n',\n",
              " 11: '1',\n",
              " 12: '2',\n",
              " 13: '6',\n",
              " 14: '/',\n",
              " 15: '9',\n",
              " 16: '8',\n",
              " 17: '0',\n",
              " 18: '.',\n",
              " 19: '7'}"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "trg_vocab.id_to_string"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Be_GKdRXyuHC"
      },
      "outputs": [],
      "source": [
        "########\n",
        "# Taken from:\n",
        "# https://pytorch.org/tutorials/beginner/transformer_tutorial.html\n",
        "# or also here:\n",
        "# https://github.com/pytorch/examples/blob/master/word_language_model/model.py\n",
        "class PositionalEncoding(nn.Module):\n",
        "\n",
        "    def __init__(self, d_model, dropout=0.0, max_len=5000):\n",
        "        super(PositionalEncoding, self).__init__()\n",
        "        self.dropout = nn.Dropout(p=dropout)\n",
        "        self.max_len = max_len\n",
        "\n",
        "        pe = torch.zeros(max_len, d_model)\n",
        "        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n",
        "        div_term = torch.exp(torch.arange(0, d_model, 2).float()\n",
        "                             * (-math.log(10000.0) / d_model))\n",
        "        pe[:, 0::2] = torch.sin(position * div_term)\n",
        "        pe[:, 1::2] = torch.cos(position * div_term)\n",
        "        pe = pe.unsqueeze(0).transpose(0, 1)  # shape (max_len, 1, dim)\n",
        "        self.register_buffer('pe', pe)  # Will not be trained.\n",
        "\n",
        "    def forward(self, x):\n",
        "        \"\"\"Inputs of forward function\n",
        "        Args:\n",
        "            x: the sequence fed to the positional encoder model (required).\n",
        "        Shape:\n",
        "            x: [sequence length, batch size, embed dim]\n",
        "            output: [sequence length, batch size, embed dim]\n",
        "        \"\"\"\n",
        "        assert x.size(0) < self.max_len, (\n",
        "            f\"Too long sequence length: increase `max_len` of pos encoding\")\n",
        "        # shape of x (len, B, dim)\n",
        "        x = x + self.pe[:x.size(0), :]\n",
        "        return self.dropout(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HvRreOJTyuHG"
      },
      "outputs": [],
      "source": [
        "class TransformerModel(nn.Module):\n",
        "    def __init__(self, source_vocabulary_size, target_vocabulary_size,\n",
        "                 d_model=256, pad_id=0, encoder_layers=3, decoder_layers=2,\n",
        "                 dim_feedforward=1024, num_heads=8):\n",
        "        # all arguments are (int)\n",
        "        super().__init__()\n",
        "        self.pad_id = pad_id\n",
        "\n",
        "        self.embedding_src = nn.Embedding(\n",
        "            source_vocabulary_size, d_model, padding_idx=pad_id)\n",
        "        self.embedding_tgt = nn.Embedding(\n",
        "            target_vocabulary_size, d_model, padding_idx=pad_id)\n",
        "\n",
        "        self.pos_encoder = PositionalEncoding(d_model)\n",
        "        self.transformer = nn.Transformer(\n",
        "            d_model, num_heads, encoder_layers, decoder_layers, dim_feedforward)\n",
        "        self.encoder = self.transformer.encoder\n",
        "        self.decoder = self.transformer.decoder\n",
        "        self.linear = nn.Linear(d_model, target_vocabulary_size)\n",
        "\n",
        "    def create_src_padding_mask(self, src):\n",
        "        # input src of shape ()\n",
        "        src_padding_mask = src.transpose(0, 1) == 0\n",
        "        return src_padding_mask\n",
        "\n",
        "    def create_tgt_padding_mask(self, tgt):\n",
        "        # input tgt of shape ()\n",
        "        tgt_padding_mask = tgt.transpose(0, 1) == 0\n",
        "        return tgt_padding_mask\n",
        "\n",
        "\n",
        "    def greedy_search(self, src, max_len, start_symbol):\n",
        "            src_padding_mask = self.create_src_padding_mask(src).to(DEVICE)\n",
        "            src = self.embedding_src(src)\n",
        "            src = self.pos_encoder(src)\n",
        "            memory = self.encoder(src, mask=None, src_key_padding_mask=src_padding_mask)\n",
        "            tpred = torch.ones(memory.size(1),1).fill_(start_symbol).type(torch.long).to(DEVICE)\n",
        "            ans=[]\n",
        "            for i in range(max_len):\n",
        "                tpred_padding_mask = self.create_tgt_padding_mask(tpred)\n",
        "                tpred_padding_mask = torch.transpose(tpred_padding_mask, 0, 1)\n",
        "                memory = memory.to(DEVICE)\n",
        "                #Decoding step\n",
        "                out = self.decoder(tgt = self.pos_encoder( self.embedding_tgt(torch.transpose(tpred, 0, 1))),memory = memory, memory_mask = None, tgt_mask=None,tgt_key_padding_mask = tpred_padding_mask,memory_key_padding_mask = src_padding_mask)\n",
        "                out = out.transpose(0, 1)\n",
        "                prob = self.linear(out[:, -1])\n",
        "                #Getting the letter and contating\n",
        "                _, next_letter = torch.max(prob, dim=1)\n",
        "                next_letter = next_letter.unsqueeze(dim=1)\n",
        "                tpred = torch.cat((tpred, next_letter), dim=1)\n",
        "\n",
        "                #Stopping Criteria\n",
        "                if 2 in next_letter:\n",
        "                  ind = (next_letter == 2).nonzero(as_tuple=True)[0]\n",
        "                  for j in ind:\n",
        "                      if j not in ans:\n",
        "                          ans.append(j)\n",
        "                if len(ans) == src.shape[1]:\n",
        "                  break\n",
        "\n",
        "            return tpred\n",
        "\n",
        "    # Implement me!\n",
        "    def forward_separate(self, src, tgt):\n",
        "        \"\"\"Forward function.\n",
        "\n",
        "        Parameters:\n",
        "          src: tensor of shape (sequence_length, batch, data dim)\n",
        "          tgt: tensor of shape (sequence_length, batch, data dim)\n",
        "        Returns:\n",
        "          tensor of shape (sequence_length, batch, data dim)\n",
        "        \"\"\"\n",
        "        src_key_padding_mask = self.create_src_padding_mask(src).to(DEVICE)\n",
        "        tgt_key_padding_mask = self.create_tgt_padding_mask(tgt).to(DEVICE)\n",
        "        memory_key_padding_mask = src_key_padding_mask\n",
        "        tgt_mask = nn.Transformer.generate_square_subsequent_mask(\n",
        "            tgt.shape[0]).to(DEVICE)\n",
        "\n",
        "        tgt_input_embedding = self.embedding_tgt(tgt)\n",
        "        tgt_input_embedding *= math.sqrt(self.d_model)\n",
        "        tgt_input_embedding = self.pos_encoder(tgt_input_embedding)\n",
        "\n",
        "        src_input_embedding = self.embedding_src(src)\n",
        "        src_input_embedding *= math.sqrt(self.d_model)\n",
        "        src_input_embedding = self.pos_encoder(src_input_embedding)\n",
        "\n",
        "        encoder_outputs = self.encoder(src_input_embedding, src_key_padding_mask)\n",
        "        decoder_outputs = self.decoder(\n",
        "            tgt_input_embedding, encoder_outputs, tgt_mask=tgt_mask, tgt_key_padding_mask=tgt_key_padding_mask, memory_key_padding_mask=memory_key_padding_mask)\n",
        "\n",
        "        output = self.linear(decoder_outputs)\n",
        "\n",
        "        return output\n",
        "\n",
        "\n",
        "    def forward(self, src, tgt):\n",
        "        \"\"\"Forward function.\n",
        "\n",
        "        Parameters:\n",
        "          src: tensor of shape (sequence_length, batch, data dim)\n",
        "          tgt: tensor of shape (sequence_length, batch, data dim)\n",
        "        Returns:\n",
        "          tensor of shape (sequence_length, batch, data dim)\n",
        "        \"\"\"\n",
        "        src_key_padding_mask = self.create_src_padding_mask(src).to(DEVICE)\n",
        "        tgt_key_padding_mask = self.create_tgt_padding_mask(tgt).to(DEVICE)\n",
        "        memory_key_padding_mask = src_key_padding_mask\n",
        "        tgt_mask = nn.Transformer.generate_square_subsequent_mask(\n",
        "            tgt.shape[0]).to(DEVICE)\n",
        "\n",
        "        tgt = self.embedding_tgt(tgt)\n",
        "        tgt = self.pos_encoder(tgt)\n",
        "        out = self.embedding_src(src)\n",
        "        out = self.pos_encoder(out)\n",
        "        out = self.transformer(\n",
        "            out, tgt, src_key_padding_mask=src_key_padding_mask,\n",
        "            tgt_mask=tgt_mask, tgt_key_padding_mask=tgt_key_padding_mask,\n",
        "            memory_key_padding_mask=memory_key_padding_mask)\n",
        "        out = self.linear(out)\n",
        "        return out"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sM3F3PuwSW4G"
      },
      "outputs": [],
      "source": [
        "def num_correct(tgt_sequences, model_predictions, tgt_vocab):\n",
        "      # Initialize the number of correct predictions to 0\n",
        "    num_correct = 0\n",
        "    example_pred_sequence=[]\n",
        "    example_target_sequence=[]\n",
        "    # Iterate through each target sequence, model prediction, and source sequence\n",
        "    for i in tgt_sequences[0]:\n",
        "        example_target_sequence.append(trg_vocab.id_to_string[i.item()])\n",
        "\n",
        "    for i in model_predictions[0]:\n",
        "        example_pred_sequence.append(trg_vocab.id_to_string[i.item()])\n",
        "\n",
        "        # Check if the model prediction is correct, i.e. if the prediction\n",
        "        # string is equal to the target string\n",
        "    if example_target_sequence == example_pred_sequence:\n",
        "            num_correct = 1\n",
        "    else:\n",
        "      num_correct=0\n",
        "    return num_correct\n",
        "def compute_accuracy(corr,step):\n",
        "    return corr/step\n",
        "# Calculate the accuracy as the number of correct predictions divided by the total number of predictions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D8vI_uxTBGKH",
        "outputId": "c473ae84-e608-49b5-e685-a64d152af77a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "torch.Size([64, 57])\n",
            "torch.Size([64, 33])\n"
          ]
        }
      ],
      "source": [
        "# Example batch\n",
        "batch = next(iter(train_data_loader))\n",
        "\n",
        "source = batch[0]  # source sequence\n",
        "print(source.shape)\n",
        "target = batch[1]  # target sequence\n",
        "print(target.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-JNGt31VA6DH",
        "outputId": "fe762890-c8a8-49ba-cb82-91d6d5e06791"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['W', 'h', 'a', 't', ' ', 'i', 's', ' ', 't', 'h', 'e', ' ', 't', 'e', 'n', 's', ' ', 'd', 'i', 'g', 'i', 't', ' ', 'o', 'f', ' ', '1', '4', '3', '0', '9', '1', '3', '?', '\\n', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>', '<pad>']\n",
            "What is the tens digit of 1430913?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "['<sos>', '1', '\\n', '<eos>']\n"
          ]
        }
      ],
      "source": [
        "example_source_sequence = []\n",
        "\n",
        "for i in source[34]:\n",
        "    example_source_sequence.append(src_vocab.id_to_string[i.item()])\n",
        "\n",
        "print(example_source_sequence)\n",
        "\n",
        "print(''.join(example_source_sequence))\n",
        "\n",
        "example_target_sequence = []\n",
        "\n",
        "for i in target[34]:\n",
        "    example_target_sequence.append(trg_vocab.id_to_string[i.item()])\n",
        "\n",
        "print(example_target_sequence)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bwH2w7cdLCaF",
        "outputId": "8532642e-a26e-45bf-b8c2-04da1489e92d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "TGT SOS :  ['<sos>', '1', '\\n']\n",
            "TGT SOS : <sos>1\n",
            "\n",
            "\n",
            "TGT EOS:  ['1', '\\n', '<eos>']\n",
            "TGT EOS: 1\n",
            "<eos>\n"
          ]
        }
      ],
      "source": [
        "tq=[]\n",
        "\n",
        "tgt_shiftsos=target[:,0:target.size(1)-1]\n",
        "tgt_shiftEOS=target[:,1:target.size(1)]\n",
        "for j in tgt_shiftsos[34]:\n",
        "    tq.append(trg_vocab.id_to_string[j.item()])\n",
        "print('TGT SOS : ',tq)\n",
        "print('TGT SOS : '+''.join(tq))\n",
        "print()\n",
        "tq=[]\n",
        "for j in tgt_shiftEOS[34]:\n",
        "    tq.append(trg_vocab.id_to_string[j.item()])\n",
        "print('TGT EOS: ',tq)\n",
        "print('TGT EOS: '+''.join(tq))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OScCT6Zx1aYc"
      },
      "outputs": [],
      "source": [
        "#Trainning\n",
        "gradient_accumulation=10\n",
        "report_every=150\n",
        "print_every=300\n",
        "def Training(model,train_data_loader,valid_data_loader,optimizer,loss_fn):\n",
        "    num_epochs=0\n",
        "    model.train()\n",
        "\n",
        "    train_loss=[]\n",
        "    train_acc=[]\n",
        "    val_loss=[]\n",
        "    val_acc=[]\n",
        "    accu_break=0\n",
        "    while (accu_break==0):\n",
        "\n",
        "        running_loss = 0.0\n",
        "        run_step = 0\n",
        "        running_correct=0\n",
        "        running_total=0\n",
        "\n",
        "        for i, (src, tgt) in enumerate(train_data_loader):\n",
        "\n",
        "            tgt_shiftsos=tgt[:,0:tgt.size(1)-1]\n",
        "            tgt_shiftEOS=tgt[:,1:tgt.size(1)]\n",
        "\n",
        "            tgt_shiftsos=torch.transpose(tgt_shiftsos,0,1)\n",
        "            src_model=torch.transpose(src,0,1)\n",
        "\n",
        "            # Move the inputs to the correct device\n",
        "            src = src.to(DEVICE)\n",
        "            tgt = tgt.to(DEVICE)\n",
        "            src_model = src_model.to(DEVICE)\n",
        "\n",
        "            #Zero the Gradients\n",
        "\n",
        "\n",
        "            #Forward pass\n",
        "            out=model(src_model,tgt_shiftsos)\n",
        "\n",
        "            loss = loss_fn(out.permute(1,2,0),tgt_shiftEOS)\n",
        "            # print(\"1: {} 2: {}\".format(out.view(-1, ntoken_tgt).size(),tgt.view(-1).size()))\n",
        "\n",
        "            running_loss=running_loss+loss.item()\n",
        "            loss.backward()\n",
        "\n",
        "\n",
        "            run_step=run_step+1\n",
        "            running_total += src.size(0)\n",
        "\n",
        "            a=model.greedy_search(src_model,tgt.size(1),3)\n",
        "            running_correct+=num_correct(a,tgt,trg_vocab)\n",
        "\n",
        "            if i % gradient_accumulation == 0:\n",
        "                torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)\n",
        "                optimizer.step()\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "\n",
        "            if i % report_every == 0:\n",
        "                acc_train=compute_accuracy(running_correct,run_step)\n",
        "                sq=[]\n",
        "                tq=[]\n",
        "                print('--------------------------------')\n",
        "                print(f'Epoch: {num_epochs} Training Batch {i}')\n",
        "                print(f'Trainning Loss: {running_loss / run_step :.3f} ')\n",
        "                print(f'Trainning Accuracy: { acc_train:.2%} ')\n",
        "\n",
        "\n",
        "\n",
        "                train_loss.append(running_loss / run_step)\n",
        "                train_acc.append(acc_train)\n",
        "\n",
        "                running_correct=0\n",
        "                running_total=0\n",
        "\n",
        "                running_loss = 0.0\n",
        "                run_step = 0\n",
        "\n",
        "                run_step_val=0\n",
        "                run_loss_acum_val=0\n",
        "                running_total_val=0\n",
        "                running_correct_val=0\n",
        "                model.eval()\n",
        "                for j, (src_val, tgt_val)  in enumerate(valid_data_loader):\n",
        "\n",
        "                    tgt_val_sos=tgt_val[:,0:2]\n",
        "                    tgt_val_EOS=tgt_val[:,1:3]\n",
        "\n",
        "                    src_val_model=torch.transpose(src_val,0,1)\n",
        "                    tgt_val_sos=torch.transpose(tgt_val_sos,0,1)\n",
        "\n",
        "                    src_val = src_val.to(DEVICE)\n",
        "                    tgt_val = tgt_val.to(DEVICE)\n",
        "\n",
        "                    out_val=model(src_val_model,tgt_val_sos)\n",
        "\n",
        "                    loss_val = loss_fn(out_val.permute(1,2,0),tgt_val_EOS)\n",
        "                    a=model.greedy_search(src_val_model,tgt_val.size(1),3)\n",
        "                    running_correct_val+=num_correct(a,tgt_val,trg_vocab)\n",
        "                    run_step_val += 1\n",
        "                    run_loss_acum_val += loss_val.item()\n",
        "                    running_total_val += src_val.size(0)\n",
        "                    if j % print_every==0:\n",
        "                      sq=[]\n",
        "                      tq=[]\n",
        "                      for j in src[0]:\n",
        "                          sq.append(src_vocab.id_to_string[j.item()])\n",
        "                      print('SRC: '+''.join(sq))\n",
        "\n",
        "                      for j in a[0]:\n",
        "                        tq.append(trg_vocab.id_to_string[j.item()])\n",
        "                      print('PRED: '+''.join(tq))\n",
        "\n",
        "                acc_val=compute_accuracy(running_correct_val,run_step_val)\n",
        "\n",
        "                print(f'Validation Loss: {run_loss_acum_val / run_step_val :.3f}')\n",
        "                print(f'Validation Accuracy: { acc_val:.2%}')\n",
        "                print('--------------------------------')\n",
        "                val_loss.append(run_loss_acum_val / run_step_val)\n",
        "                val_acc.append(acc_val)\n",
        "\n",
        "                model.train()\n",
        "                if(acc_val> .97 ):\n",
        "                    accu_break=1\n",
        "                    break\n",
        "    return  train_loss,train_acc,val_loss,val_acc\n",
        "\n",
        "\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lWtZqIZFtKTO",
        "outputId": "3617af7f-5211-4a59-db8c-535183211b7f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "vocab size: 34\n"
          ]
        }
      ],
      "source": [
        "learning_rate = 0.0001\n",
        "\n",
        "ntoken_src = len(src_vocab)\n",
        "ntoken_tgt = len(trg_vocab)\n",
        "\n",
        "# Set the device\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# vocab_size = len(module.vocab.itos)\n",
        "vocab_size = len(src_vocab.id_to_string)\n",
        "print(F\"vocab size: {vocab_size}\")\n",
        "model = TransformerModel(ntoken_src, ntoken_tgt, d_model=256, pad_id=0, encoder_layers=3, decoder_layers=2, dim_feedforward=1024, num_heads=8)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "loss_fn = nn.CrossEntropyLoss(ignore_index=0)\n",
        "model=model.to(DEVICE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "dioX6Cbk3mAT",
        "outputId": "25c46164-afd5-44c1-811c-955cc46c53b0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--------------------------------\n",
            "Epoch: 0 Training Batch 0\n",
            "Trainning Loss: 3.131 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort -258, 2, 1 in ascending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>,  , , , , 1, 1, 1,7, , , , , 1,7\n"
          ]
        },
        {
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-31-f1ec6c337821>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_loss_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_acc_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mval_loss_1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mval_acc_1\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mTraining\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_data_loader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_data_loader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalid_data_loader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_data_loader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mloss_fn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mloss_fn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-29-99550687a3f2>\u001b[0m in \u001b[0;36mTraining\u001b[0;34m(model, train_data_loader, valid_data_loader, optimizer, loss_fn)\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m                     \u001b[0mloss_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_val\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtgt_val_EOS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m                     \u001b[0ma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgreedy_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc_val_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtgt_val\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m                     \u001b[0mrunning_correct_val\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0mnum_correct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtgt_val\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrg_vocab\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m                     \u001b[0mrun_step_val\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-26-81e47e4d1184>\u001b[0m in \u001b[0;36mgreedy_search\u001b[0;34m(self, src, max_len, start_symbol)\u001b[0m\n\u001b[1;32m     47\u001b[0m                 \u001b[0;31m#Getting the letter and contating\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m                 \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnext_letter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m                 \u001b[0mnext_letter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext_letter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m                 \u001b[0mtpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtpred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnext_letter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "train_loss_1,train_acc_1,val_loss_1,val_acc_1= Training(model=model,train_data_loader=train_data_loader,valid_data_loader=valid_data_loader,optimizer=optimizer,loss_fn=loss_fn)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "KPueIfUjsR7n",
        "outputId": "6899c08e-4f2f-45f0-d730-302958979ad0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "gtrain_loss=[]\n",
        "gtrain_acc=[]\n",
        "gval_loss=[]\n",
        "gval_acc=[]\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x =  range(0,len(train_loss_1)*150,150)\n",
        "fig, ax = plt.subplots(1,2)\n",
        "fig.set_size_inches(10, 5)\n",
        "fig.tight_layout(pad=3)\n",
        "ax[0].plot(x,train_loss_1,c='blue',label=\"training\")\n",
        "ax[0].plot(x,val_loss_1,c='red',label=\"validation\")\n",
        "ax[0].set(title='Loss Training vs Validation')\n",
        "ax[0].set_xlabel (\"Steps\", fontsize =16)\n",
        "ax[0].set_ylabel (\"Loss\", fontsize =16)\n",
        "ax[1].plot(x,train_acc_1,c='blue',label=\"training\")\n",
        "ax[1].plot(x,val_acc_1,c='red',label=\"validation\")\n",
        "ax[1].set(title='Accuracy Training vs Validation')\n",
        "ax[1].set_xlabel (\"Steps-\", fontsize =16)\n",
        "ax[1].set_ylabel (\"Accuracy\", fontsize =16)\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8GE6FuM3ez8",
        "outputId": "e2bde7b1-e728-438c-bd2a-b35e03cdae43"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[56 97  6]\n",
            "--------------------------------\n",
            "SRC: What is the tens digit of 51106392?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>9\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the thousands digit of 32642109?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the tens digit of 55475713?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>1\n",
            "<eos>\n"
          ]
        }
      ],
      "source": [
        "\n",
        "rand=np.random.randint(0,100,3)\n",
        "print(rand)\n",
        "\n",
        "\n",
        "for i, (src, tgt) in enumerate(valid_data_loader):\n",
        "\n",
        "    if i in rand :\n",
        "\n",
        "        src_greedy=torch.transpose(src,0,1)\n",
        "        a=model.greedy_search(src_greedy,tgt.size(1),3,2)\n",
        "\n",
        "        sq=[]\n",
        "        tq=[]\n",
        "        print('--------------------------------')\n",
        "        for j in src[0]:\n",
        "            sq.append(src_vocab.id_to_string[j.item()])\n",
        "        print('SRC: '+''.join(sq))\n",
        "\n",
        "        for j in a[0]:\n",
        "            tq.append(trg_vocab.id_to_string[j.item()])\n",
        "        print('PRED: '+''.join(tq))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k74FXpZvtgeh",
        "outputId": "eea926c2-5874-4210-bffe-71b0dccf6390"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "vocab size: 34\n"
          ]
        }
      ],
      "source": [
        "#CHANGED PARAMETERS 7.3\n",
        "learning_rate = 0.0001\n",
        "\n",
        "ntoken_src = len(src_vocab)\n",
        "ntoken_tgt = len(trg_vocab)\n",
        "\n",
        "# Set the device\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# vocab_size = len(module.vocab.itos)\n",
        "vocab_size = len(src_vocab.id_to_string)\n",
        "print(F\"vocab size: {vocab_size}\")\n",
        "model = TransformerModel(ntoken_src, ntoken_tgt, d_model=256, pad_id=0, encoder_layers=2, decoder_layers=2, dim_feedforward=512, num_heads=8)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "loss_fn = nn.CrossEntropyLoss(ignore_index=0)\n",
        "model=model.to(DEVICE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lr1ahQ1ktvmT",
        "outputId": "ecb8f1b2-1d8c-42b2-ac2e-8233e1dc4813"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--------------------------------\n",
            "Epoch: 1 Training Batch 0\n",
            "Trainning Loss: 2.982 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: What is the ten thousands digit of 22272?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>\n",
            "\n",
            "<eos>\n",
            "Validation Loss: 2.407\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 150\n",
            "Trainning Loss: 1.702 \n",
            "Trainning Accuracy: 0.67% \n",
            "SRC: What is the thousands digit of 4914?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>1\n",
            "<eos>\n",
            "Validation Loss: 1.234\n",
            "Validation Accuracy: 15.92%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 300\n",
            "Trainning Loss: 1.197 \n",
            "Trainning Accuracy: 8.00% \n",
            "SRC: What is the hundred thousands digit of 1575915?\n",
            "<pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 1.130\n",
            "Validation Accuracy: 17.83%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 450\n",
            "Trainning Loss: 1.100 \n",
            "Trainning Accuracy: 21.33% \n",
            "SRC: What is the units digit of 31071?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 1.016\n",
            "Validation Accuracy: 26.75%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 600\n",
            "Trainning Loss: 0.934 \n",
            "Trainning Accuracy: 34.00% \n",
            "SRC: What is the units digit of 338?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.873\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 750\n",
            "Trainning Loss: 0.810 \n",
            "Trainning Accuracy: 33.33% \n",
            "SRC: What is the tens digit of 369307343?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.827\n",
            "Validation Accuracy: 26.75%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 900\n",
            "Trainning Loss: 0.762 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the tens digit of 335284033?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.796\n",
            "Validation Accuracy: 28.03%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1050\n",
            "Trainning Loss: 0.739 \n",
            "Trainning Accuracy: 46.00% \n",
            "SRC: What is the thousands digit of 66489?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.785\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1200\n",
            "Trainning Loss: 0.726 \n",
            "Trainning Accuracy: 43.33% \n",
            "SRC: What is the ten thousands digit of 27263902?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.774\n",
            "Validation Accuracy: 28.66%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1350\n",
            "Trainning Loss: 0.727 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the units digit of 367475?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.774\n",
            "Validation Accuracy: 30.57%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1500\n",
            "Trainning Loss: 0.716 \n",
            "Trainning Accuracy: 48.67% \n",
            "SRC: What is the hundreds digit of 262423?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.776\n",
            "Validation Accuracy: 28.66%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1650\n",
            "Trainning Loss: 0.709 \n",
            "Trainning Accuracy: 31.33% \n",
            "SRC: What is the tens digit of 69418?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.764\n",
            "Validation Accuracy: 32.48%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1800\n",
            "Trainning Loss: 0.703 \n",
            "Trainning Accuracy: 36.67% \n",
            "SRC: What is the hundred thousands digit of 1189777812?\n",
            "\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.764\n",
            "Validation Accuracy: 30.57%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 1950\n",
            "Trainning Loss: 0.706 \n",
            "Trainning Accuracy: 32.67% \n",
            "SRC: What is the ten thousands digit of 12511?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.761\n",
            "Validation Accuracy: 31.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2100\n",
            "Trainning Loss: 0.696 \n",
            "Trainning Accuracy: 42.00% \n",
            "SRC: What is the tens digit of 13931?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.754\n",
            "Validation Accuracy: 31.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2250\n",
            "Trainning Loss: 0.690 \n",
            "Trainning Accuracy: 40.00% \n",
            "SRC: What is the millions digit of 3285546?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.751\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2400\n",
            "Trainning Loss: 0.690 \n",
            "Trainning Accuracy: 35.33% \n",
            "SRC: What is the hundreds digit of 3074?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.744\n",
            "Validation Accuracy: 32.48%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2550\n",
            "Trainning Loss: 0.677 \n",
            "Trainning Accuracy: 40.00% \n",
            "SRC: What is the hundreds digit of 17288069?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.737\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2700\n",
            "Trainning Loss: 0.679 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the units digit of 96452?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.725\n",
            "Validation Accuracy: 35.67%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 2850\n",
            "Trainning Loss: 0.675 \n",
            "Trainning Accuracy: 40.00% \n",
            "SRC: What is the units digit of 1339748?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.707\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3000\n",
            "Trainning Loss: 0.676 \n",
            "Trainning Accuracy: 36.67% \n",
            "SRC: What is the tens digit of 1482405?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.691\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3150\n",
            "Trainning Loss: 0.664 \n",
            "Trainning Accuracy: 44.00% \n",
            "SRC: What is the units digit of 923140544?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.673\n",
            "Validation Accuracy: 38.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3300\n",
            "Trainning Loss: 0.654 \n",
            "Trainning Accuracy: 42.67% \n",
            "SRC: What is the thousands digit of 1129?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.654\n",
            "Validation Accuracy: 37.58%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3450\n",
            "Trainning Loss: 0.653 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the millions digit of 459970703?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.641\n",
            "Validation Accuracy: 38.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3600\n",
            "Trainning Loss: 0.650 \n",
            "Trainning Accuracy: 44.00% \n",
            "SRC: What is the ten millions digit of 1130906743?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.631\n",
            "Validation Accuracy: 42.04%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3750\n",
            "Trainning Loss: 0.641 \n",
            "Trainning Accuracy: 38.67% \n",
            "SRC: What is the ten thousands digit of 44773355?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.618\n",
            "Validation Accuracy: 42.04%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 3900\n",
            "Trainning Loss: 0.629 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the hundred millions digit of 127718131?\n",
            "<pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.613\n",
            "Validation Accuracy: 40.76%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4050\n",
            "Trainning Loss: 0.633 \n",
            "Trainning Accuracy: 44.00% \n",
            "SRC: What is the ten thousands digit of 118444?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.602\n",
            "Validation Accuracy: 43.95%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4200\n",
            "Trainning Loss: 0.613 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the tens digit of 70438?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.593\n",
            "Validation Accuracy: 41.40%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4350\n",
            "Trainning Loss: 0.601 \n",
            "Trainning Accuracy: 45.33% \n",
            "SRC: What is the hundred thousands digit of 2487834?\n",
            "<pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.584\n",
            "Validation Accuracy: 42.68%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4500\n",
            "Trainning Loss: 0.586 \n",
            "Trainning Accuracy: 44.00% \n",
            "SRC: What is the units digit of 2042?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.565\n",
            "Validation Accuracy: 45.86%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4650\n",
            "Trainning Loss: 0.569 \n",
            "Trainning Accuracy: 45.33% \n",
            "SRC: What is the hundreds digit of 2342?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.527\n",
            "Validation Accuracy: 50.96%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4800\n",
            "Trainning Loss: 0.544 \n",
            "Trainning Accuracy: 45.33% \n",
            "SRC: What is the units digit of 18196713?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.513\n",
            "Validation Accuracy: 51.59%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 4950\n",
            "Trainning Loss: 0.505 \n",
            "Trainning Accuracy: 61.33% \n",
            "SRC: What is the millions digit of 79568281?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.462\n",
            "Validation Accuracy: 59.87%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5100\n",
            "Trainning Loss: 0.461 \n",
            "Trainning Accuracy: 50.00% \n",
            "SRC: What is the hundred thousands digit of 134331?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.402\n",
            "Validation Accuracy: 64.33%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5250\n",
            "Trainning Loss: 0.413 \n",
            "Trainning Accuracy: 62.00% \n",
            "SRC: What is the hundreds digit of 2808030?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.339\n",
            "Validation Accuracy: 71.97%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5400\n",
            "Trainning Loss: 0.375 \n",
            "Trainning Accuracy: 73.33% \n",
            "SRC: What is the hundred millions digit of 161070920?\n",
            "<pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.321\n",
            "Validation Accuracy: 71.97%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5550\n",
            "Trainning Loss: 0.335 \n",
            "Trainning Accuracy: 74.67% \n",
            "SRC: What is the hundreds digit of 1799779?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.286\n",
            "Validation Accuracy: 72.61%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5700\n",
            "Trainning Loss: 0.305 \n",
            "Trainning Accuracy: 68.67% \n",
            "SRC: What is the hundreds digit of 4149?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.283\n",
            "Validation Accuracy: 73.89%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 5850\n",
            "Trainning Loss: 0.287 \n",
            "Trainning Accuracy: 73.33% \n",
            "SRC: What is the hundreds digit of 186056?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.285\n",
            "Validation Accuracy: 73.25%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6000\n",
            "Trainning Loss: 0.266 \n",
            "Trainning Accuracy: 73.33% \n",
            "SRC: What is the ten thousands digit of 3956268275?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.272\n",
            "Validation Accuracy: 75.16%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6150\n",
            "Trainning Loss: 0.243 \n",
            "Trainning Accuracy: 80.67% \n",
            "SRC: What is the hundreds digit of 166997?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.237\n",
            "Validation Accuracy: 80.25%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6300\n",
            "Trainning Loss: 0.229 \n",
            "Trainning Accuracy: 82.00% \n",
            "SRC: What is the tens digit of 52438?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.221\n",
            "Validation Accuracy: 80.25%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6450\n",
            "Trainning Loss: 0.213 \n",
            "Trainning Accuracy: 83.33% \n",
            "SRC: What is the ten thousands digit of 13226?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.227\n",
            "Validation Accuracy: 77.71%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6600\n",
            "Trainning Loss: 0.206 \n",
            "Trainning Accuracy: 88.67% \n",
            "SRC: What is the tens digit of 11674?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.224\n",
            "Validation Accuracy: 78.98%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6750\n",
            "Trainning Loss: 0.188 \n",
            "Trainning Accuracy: 88.00% \n",
            "SRC: What is the ten millions digit of 645702509?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.204\n",
            "Validation Accuracy: 82.80%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 6900\n",
            "Trainning Loss: 0.181 \n",
            "Trainning Accuracy: 87.33% \n",
            "SRC: What is the units digit of 60089?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.156\n",
            "Validation Accuracy: 85.35%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7050\n",
            "Trainning Loss: 0.176 \n",
            "Trainning Accuracy: 92.00% \n",
            "SRC: What is the units digit of 579212989?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.183\n",
            "Validation Accuracy: 84.08%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7200\n",
            "Trainning Loss: 0.151 \n",
            "Trainning Accuracy: 92.67% \n",
            "SRC: What is the tens digit of 988?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.135\n",
            "Validation Accuracy: 85.99%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7350\n",
            "Trainning Loss: 0.150 \n",
            "Trainning Accuracy: 90.67% \n",
            "SRC: What is the hundreds digit of 4126?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.118\n",
            "Validation Accuracy: 88.54%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7500\n",
            "Trainning Loss: 0.140 \n",
            "Trainning Accuracy: 88.67% \n",
            "SRC: What is the tens digit of 4737939?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.154\n",
            "Validation Accuracy: 88.54%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7650\n",
            "Trainning Loss: 0.145 \n",
            "Trainning Accuracy: 84.00% \n",
            "SRC: What is the hundred thousands digit of 109138528?\n",
            "<pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.088\n",
            "Validation Accuracy: 92.99%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7800\n",
            "Trainning Loss: 0.119 \n",
            "Trainning Accuracy: 90.67% \n",
            "SRC: What is the hundreds digit of 1500?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.089\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 7950\n",
            "Trainning Loss: 0.112 \n",
            "Trainning Accuracy: 90.00% \n",
            "SRC: What is the tens digit of 3526?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.058\n",
            "Validation Accuracy: 96.18%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 1 Training Batch 8100\n",
            "Trainning Loss: 0.099 \n",
            "Trainning Accuracy: 94.00% \n",
            "SRC: What is the hundred thousands digit of 1149992?\n",
            "<pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.040\n",
            "Validation Accuracy: 100.00%\n",
            "--------------------------------\n"
          ]
        }
      ],
      "source": [
        "train_loss_2,train_acc_2,val_loss_2,val_acc_2= Training(model=model,train_data_loader=train_data_loader,valid_data_loader=valid_data_loader,optimizer=optimizer,loss_fn=loss_fn)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "60HxyD7yt_Zp",
        "outputId": "43a1f951-dcd8-475b-8aa0-84850789621d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "x =  range(0,len(train_loss_2)*150,150)\n",
        "fig, ax = plt.subplots(1,2)\n",
        "fig.set_size_inches(10, 5)\n",
        "fig.tight_layout(pad=3)\n",
        "ax[0].plot(x,train_loss_2,c='blue',label=\"training\")\n",
        "ax[0].plot(x,val_loss_2,c='red',label=\"validation\")\n",
        "ax[0].set(title='Loss Training vs Validation')\n",
        "ax[0].set_xlabel (\"Steps\", fontsize =16)\n",
        "ax[0].set_ylabel (\"Loss\", fontsize =16)\n",
        "ax[1].plot(x,train_acc_2,c='blue',label=\"training\")\n",
        "ax[1].plot(x,val_acc_2,c='red',label=\"validation\")\n",
        "ax[1].set(title='Accuracy Training vs Validation')\n",
        "ax[1].set_xlabel (\"Steps-\", fontsize =16)\n",
        "ax[1].set_ylabel (\"Accuracy\", fontsize =16)\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YxBsPaCc0-6t",
        "outputId": "6424d3d9-4b98-46a6-dbc5-a5cc7ed6e164"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[50 64 87]\n",
            "--------------------------------\n",
            "SRC: What is the millions digit of 32665251?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the ten millions digit of 66469098?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>6\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the thousands digit of 37824394?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>4\n",
            "<eos>\n"
          ]
        }
      ],
      "source": [
        "\n",
        "rand=np.random.randint(0,100,3)\n",
        "print(rand)\n",
        "\n",
        "\n",
        "for i, (src, tgt) in enumerate(valid_data_loader):\n",
        "\n",
        "    if i in rand :\n",
        "\n",
        "        src_greedy=torch.transpose(src,0,1)\n",
        "        a=model.greedy_search(src_greedy,tgt.size(1),3,2)\n",
        "\n",
        "        sq=[]\n",
        "        tq=[]\n",
        "        print('--------------------------------')\n",
        "        for j in src[0]:\n",
        "            sq.append(src_vocab.id_to_string[j.item()])\n",
        "        print('SRC: '+''.join(sq))\n",
        "\n",
        "        for j in a[0]:\n",
        "            tq.append(trg_vocab.id_to_string[j.item()])\n",
        "        print('PRED: '+''.join(tq))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cHjWGCrl08yU",
        "outputId": "7311a0ab-4673-46ef-b930-c6710d5cbd61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "vocab size: 34\n"
          ]
        }
      ],
      "source": [
        "#Changed 2. modification\n",
        "learning_rate = 0.0001\n",
        "\n",
        "ntoken_src = len(src_vocab)\n",
        "ntoken_tgt = len(trg_vocab)\n",
        "\n",
        "# Set the device\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# vocab_size = len(module.vocab.itos)\n",
        "vocab_size = len(src_vocab.id_to_string)\n",
        "print(F\"vocab size: {vocab_size}\")\n",
        "model = TransformerModel(ntoken_src, ntoken_tgt, d_model=256, pad_id=0, encoder_layers=1, decoder_layers=1, dim_feedforward=1024, num_heads=8)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "loss_fn = nn.CrossEntropyLoss(ignore_index=0)\n",
        "model=model.to(DEVICE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VemcLZAbAc6x",
        "outputId": "611b7ff5-0721-4a32-fccc-eb4b6740de1f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--------------------------------\n",
            "Epoch: 0 Training Batch 0\n",
            "Trainning Loss: 2.923 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: What is the ten millions digit of 214102783?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>13<eos>\n",
            "Validation Loss: 2.531\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 150\n",
            "Trainning Loss: 1.690 \n",
            "Trainning Accuracy: 1.33% \n",
            "SRC: What is the ten millions digit of 1666439369?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>1\n",
            "<eos>\n",
            "Validation Loss: 1.270\n",
            "Validation Accuracy: 14.65%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 300\n",
            "Trainning Loss: 1.207 \n",
            "Trainning Accuracy: 16.00% \n",
            "SRC: What is the hundreds digit of 8958?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>1\n",
            "<eos>\n",
            "Validation Loss: 1.144\n",
            "Validation Accuracy: 16.56%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 450\n",
            "Trainning Loss: 1.112 \n",
            "Trainning Accuracy: 22.67% \n",
            "SRC: What is the thousands digit of 2506089?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 1.041\n",
            "Validation Accuracy: 24.84%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 600\n",
            "Trainning Loss: 0.953 \n",
            "Trainning Accuracy: 34.00% \n",
            "SRC: What is the hundreds digit of 671?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.870\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 750\n",
            "Trainning Loss: 0.809 \n",
            "Trainning Accuracy: 35.33% \n",
            "SRC: What is the hundreds digit of 666043?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.801\n",
            "Validation Accuracy: 29.30%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 900\n",
            "Trainning Loss: 0.758 \n",
            "Trainning Accuracy: 32.67% \n",
            "SRC: What is the hundred thousands digit of 4104781?\n",
            "<pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.779\n",
            "Validation Accuracy: 35.03%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1050\n",
            "Trainning Loss: 0.732 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the hundred thousands digit of 13599643?\n",
            "<pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.767\n",
            "Validation Accuracy: 32.48%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1200\n",
            "Trainning Loss: 0.726 \n",
            "Trainning Accuracy: 36.67% \n",
            "SRC: What is the ten thousands digit of 48300?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.768\n",
            "Validation Accuracy: 28.03%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1350\n",
            "Trainning Loss: 0.716 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the tens digit of 39587325?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.762\n",
            "Validation Accuracy: 31.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1500\n",
            "Trainning Loss: 0.715 \n",
            "Trainning Accuracy: 44.67% \n",
            "SRC: What is the hundreds digit of 215882?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.759\n",
            "Validation Accuracy: 34.39%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1650\n",
            "Trainning Loss: 0.712 \n",
            "Trainning Accuracy: 32.00% \n",
            "SRC: What is the hundreds digit of 8095?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.755\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1800\n",
            "Trainning Loss: 0.704 \n",
            "Trainning Accuracy: 45.33% \n",
            "SRC: What is the units digit of 1403?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.752\n",
            "Validation Accuracy: 30.57%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1950\n",
            "Trainning Loss: 0.695 \n",
            "Trainning Accuracy: 44.67% \n",
            "SRC: What is the hundred thousands digit of 996576297?\n",
            "<pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.755\n",
            "Validation Accuracy: 30.57%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2100\n",
            "Trainning Loss: 0.698 \n",
            "Trainning Accuracy: 42.00% \n",
            "SRC: What is the millions digit of 24462882?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.747\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2250\n",
            "Trainning Loss: 0.693 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the thousands digit of 85704?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.748\n",
            "Validation Accuracy: 33.12%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2400\n",
            "Trainning Loss: 0.689 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the ten millions digit of 1662824758?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.742\n",
            "Validation Accuracy: 31.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2550\n",
            "Trainning Loss: 0.690 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the ten thousands digit of 353827?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.743\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2700\n",
            "Trainning Loss: 0.677 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the millions digit of 2525362?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.746\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2850\n",
            "Trainning Loss: 0.685 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the tens digit of 184969?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.743\n",
            "Validation Accuracy: 29.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3000\n",
            "Trainning Loss: 0.689 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the ten millions digit of 295846602?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.741\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3150\n",
            "Trainning Loss: 0.676 \n",
            "Trainning Accuracy: 33.33% \n",
            "SRC: What is the ten thousands digit of 3029736223?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.744\n",
            "Validation Accuracy: 33.12%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3300\n",
            "Trainning Loss: 0.677 \n",
            "Trainning Accuracy: 44.00% \n",
            "SRC: What is the ten millions digit of 78119855?\n",
            "<pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.739\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3450\n",
            "Trainning Loss: 0.679 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the ten thousands digit of 552949517?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.731\n",
            "Validation Accuracy: 33.76%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3600\n",
            "Trainning Loss: 0.676 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the millions digit of 501899706?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.726\n",
            "Validation Accuracy: 31.21%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3750\n",
            "Trainning Loss: 0.671 \n",
            "Trainning Accuracy: 36.67% \n",
            "SRC: What is the millions digit of 3475667880?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.721\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3900\n",
            "Trainning Loss: 0.675 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the ten thousands digit of 91933448?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.715\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4050\n",
            "Trainning Loss: 0.668 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the hundred thousands digit of 494490?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.712\n",
            "Validation Accuracy: 32.48%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4200\n",
            "Trainning Loss: 0.661 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the ten millions digit of 798961995?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.701\n",
            "Validation Accuracy: 35.67%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4350\n",
            "Trainning Loss: 0.658 \n",
            "Trainning Accuracy: 42.67% \n",
            "SRC: What is the ten thousands digit of 769382?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.694\n",
            "Validation Accuracy: 27.39%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4500\n",
            "Trainning Loss: 0.656 \n",
            "Trainning Accuracy: 42.00% \n",
            "SRC: What is the hundreds digit of 2421?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.689\n",
            "Validation Accuracy: 36.31%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4650\n",
            "Trainning Loss: 0.655 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the thousands digit of 231785?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.680\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4800\n",
            "Trainning Loss: 0.656 \n",
            "Trainning Accuracy: 41.33% \n",
            "SRC: What is the billions digit of 3146166301?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.681\n",
            "Validation Accuracy: 35.67%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4950\n",
            "Trainning Loss: 0.658 \n",
            "Trainning Accuracy: 35.33% \n",
            "SRC: What is the millions digit of 60947380?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.674\n",
            "Validation Accuracy: 32.48%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5100\n",
            "Trainning Loss: 0.650 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the thousands digit of 757060?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.668\n",
            "Validation Accuracy: 35.67%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5250\n",
            "Trainning Loss: 0.646 \n",
            "Trainning Accuracy: 35.33% \n",
            "SRC: What is the hundred thousands digit of 193641?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.667\n",
            "Validation Accuracy: 35.03%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5400\n",
            "Trainning Loss: 0.646 \n",
            "Trainning Accuracy: 40.00% \n",
            "SRC: What is the tens digit of 5768?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.663\n",
            "Validation Accuracy: 39.49%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5550\n",
            "Trainning Loss: 0.638 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the thousands digit of 17048964?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.652\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5700\n",
            "Trainning Loss: 0.638 \n",
            "Trainning Accuracy: 37.33% \n",
            "SRC: What is the tens digit of 916?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.651\n",
            "Validation Accuracy: 38.22%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5850\n",
            "Trainning Loss: 0.629 \n",
            "Trainning Accuracy: 39.33% \n",
            "SRC: What is the hundreds digit of 13871?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.629\n",
            "Validation Accuracy: 38.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6000\n",
            "Trainning Loss: 0.626 \n",
            "Trainning Accuracy: 42.67% \n",
            "SRC: What is the millions digit of 611972429?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.645\n",
            "Validation Accuracy: 36.94%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6150\n",
            "Trainning Loss: 0.622 \n",
            "Trainning Accuracy: 42.67% \n",
            "SRC: What is the units digit of 84302?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.625\n",
            "Validation Accuracy: 42.04%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6300\n",
            "Trainning Loss: 0.622 \n",
            "Trainning Accuracy: 45.33% \n",
            "SRC: What is the hundred thousands digit of 484158677?\n",
            "<pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.626\n",
            "Validation Accuracy: 38.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6450\n",
            "Trainning Loss: 0.621 \n",
            "Trainning Accuracy: 46.67% \n",
            "SRC: What is the ten thousands digit of 5449434?\n",
            "<pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.613\n",
            "Validation Accuracy: 38.85%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6600\n",
            "Trainning Loss: 0.600 \n",
            "Trainning Accuracy: 40.67% \n",
            "SRC: What is the hundred thousands digit of 5808576?\n",
            "<pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.599\n",
            "Validation Accuracy: 45.86%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6750\n",
            "Trainning Loss: 0.592 \n",
            "Trainning Accuracy: 49.33% \n",
            "SRC: What is the thousands digit of 33772670?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.591\n",
            "Validation Accuracy: 45.22%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6900\n",
            "Trainning Loss: 0.582 \n",
            "Trainning Accuracy: 46.67% \n",
            "SRC: What is the ten millions digit of 332497928?\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.565\n",
            "Validation Accuracy: 47.13%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7050\n",
            "Trainning Loss: 0.562 \n",
            "Trainning Accuracy: 52.00% \n",
            "SRC: What is the units digit of 15910?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.541\n",
            "Validation Accuracy: 52.87%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7200\n",
            "Trainning Loss: 0.536 \n",
            "Trainning Accuracy: 60.00% \n",
            "SRC: What is the units digit of 68924930?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.483\n",
            "Validation Accuracy: 60.51%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7350\n",
            "Trainning Loss: 0.512 \n",
            "Trainning Accuracy: 50.00% \n",
            "SRC: What is the millions digit of 5268968?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.435\n",
            "Validation Accuracy: 63.06%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7500\n",
            "Trainning Loss: 0.487 \n",
            "Trainning Accuracy: 63.33% \n",
            "SRC: What is the units digit of 410387?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.439\n",
            "Validation Accuracy: 59.87%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7650\n",
            "Trainning Loss: 0.464 \n",
            "Trainning Accuracy: 62.00% \n",
            "SRC: What is the tens digit of 17805?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.343\n",
            "Validation Accuracy: 75.16%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7800\n",
            "Trainning Loss: 0.443 \n",
            "Trainning Accuracy: 65.33% \n",
            "SRC: What is the hundreds digit of 2817697?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.359\n",
            "Validation Accuracy: 69.43%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7950\n",
            "Trainning Loss: 0.417 \n",
            "Trainning Accuracy: 63.33% \n",
            "SRC: What is the units digit of 776?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.340\n",
            "Validation Accuracy: 73.25%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8100\n",
            "Trainning Loss: 0.400 \n",
            "Trainning Accuracy: 63.33% \n",
            "SRC: What is the units digit of 828579?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.320\n",
            "Validation Accuracy: 75.80%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8250\n",
            "Trainning Loss: 0.369 \n",
            "Trainning Accuracy: 76.00% \n",
            "SRC: What is the units digit of 2411?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.333\n",
            "Validation Accuracy: 73.89%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8400\n",
            "Trainning Loss: 0.356 \n",
            "Trainning Accuracy: 68.67% \n",
            "SRC: What is the tens digit of 53028?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.307\n",
            "Validation Accuracy: 74.52%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8550\n",
            "Trainning Loss: 0.336 \n",
            "Trainning Accuracy: 73.33% \n",
            "SRC: What is the ten millions digit of 2118750577?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.320\n",
            "Validation Accuracy: 74.52%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8700\n",
            "Trainning Loss: 0.326 \n",
            "Trainning Accuracy: 72.00% \n",
            "SRC: What is the units digit of 6841?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.307\n",
            "Validation Accuracy: 76.43%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8850\n",
            "Trainning Loss: 0.307 \n",
            "Trainning Accuracy: 72.00% \n",
            "SRC: What is the units digit of 28097?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.297\n",
            "Validation Accuracy: 75.80%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9000\n",
            "Trainning Loss: 0.291 \n",
            "Trainning Accuracy: 78.00% \n",
            "SRC: What is the tens digit of 475672?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.288\n",
            "Validation Accuracy: 75.16%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9150\n",
            "Trainning Loss: 0.273 \n",
            "Trainning Accuracy: 75.33% \n",
            "SRC: What is the hundreds digit of 10743?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.292\n",
            "Validation Accuracy: 75.80%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9300\n",
            "Trainning Loss: 0.263 \n",
            "Trainning Accuracy: 76.00% \n",
            "SRC: What is the hundreds digit of 505?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.275\n",
            "Validation Accuracy: 78.98%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9450\n",
            "Trainning Loss: 0.262 \n",
            "Trainning Accuracy: 80.00% \n",
            "SRC: What is the ten thousands digit of 1375572623?\n",
            "<pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.260\n",
            "Validation Accuracy: 77.07%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9600\n",
            "Trainning Loss: 0.249 \n",
            "Trainning Accuracy: 80.00% \n",
            "SRC: What is the tens digit of 628882?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.248\n",
            "Validation Accuracy: 79.62%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9750\n",
            "Trainning Loss: 0.228 \n",
            "Trainning Accuracy: 78.00% \n",
            "SRC: What is the thousands digit of 40031?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.226\n",
            "Validation Accuracy: 84.71%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9900\n",
            "Trainning Loss: 0.225 \n",
            "Trainning Accuracy: 85.33% \n",
            "SRC: What is the ten thousands digit of 11649?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.199\n",
            "Validation Accuracy: 86.62%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10050\n",
            "Trainning Loss: 0.200 \n",
            "Trainning Accuracy: 86.00% \n",
            "SRC: What is the thousands digit of 2973641?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.177\n",
            "Validation Accuracy: 89.81%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10200\n",
            "Trainning Loss: 0.194 \n",
            "Trainning Accuracy: 86.00% \n",
            "SRC: What is the tens digit of 79399327?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.154\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10350\n",
            "Trainning Loss: 0.180 \n",
            "Trainning Accuracy: 87.33% \n",
            "SRC: What is the units digit of 21186?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.149\n",
            "Validation Accuracy: 88.54%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10500\n",
            "Trainning Loss: 0.175 \n",
            "Trainning Accuracy: 86.67% \n",
            "SRC: What is the units digit of 161824?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.134\n",
            "Validation Accuracy: 91.72%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10650\n",
            "Trainning Loss: 0.161 \n",
            "Trainning Accuracy: 90.00% \n",
            "SRC: What is the tens digit of 18?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.120\n",
            "Validation Accuracy: 91.72%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10800\n",
            "Trainning Loss: 0.154 \n",
            "Trainning Accuracy: 88.67% \n",
            "SRC: What is the units digit of 81787122?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.102\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10950\n",
            "Trainning Loss: 0.141 \n",
            "Trainning Accuracy: 92.00% \n",
            "SRC: What is the ten thousands digit of 5000571?\n",
            "<pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.091\n",
            "Validation Accuracy: 92.99%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11100\n",
            "Trainning Loss: 0.141 \n",
            "Trainning Accuracy: 90.00% \n",
            "SRC: What is the hundreds digit of 551443?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.087\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11250\n",
            "Trainning Loss: 0.127 \n",
            "Trainning Accuracy: 92.67% \n",
            "SRC: What is the hundreds digit of 3433?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.076\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11400\n",
            "Trainning Loss: 0.127 \n",
            "Trainning Accuracy: 90.67% \n",
            "SRC: What is the ten millions digit of 50667280?\n",
            "<pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.080\n",
            "Validation Accuracy: 93.63%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11550\n",
            "Trainning Loss: 0.112 \n",
            "Trainning Accuracy: 90.67% \n",
            "SRC: What is the tens digit of 3413893680?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.070\n",
            "Validation Accuracy: 92.36%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11700\n",
            "Trainning Loss: 0.116 \n",
            "Trainning Accuracy: 88.67% \n",
            "SRC: What is the ten thousands digit of 3977283?\n",
            "<pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.061\n",
            "Validation Accuracy: 94.27%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11850\n",
            "Trainning Loss: 0.113 \n",
            "Trainning Accuracy: 90.67% \n",
            "SRC: What is the units digit of 225759?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.057\n",
            "Validation Accuracy: 95.54%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12000\n",
            "Trainning Loss: 0.096 \n",
            "Trainning Accuracy: 95.33% \n",
            "SRC: What is the units digit of 1041?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.060\n",
            "Validation Accuracy: 92.99%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12150\n",
            "Trainning Loss: 0.103 \n",
            "Trainning Accuracy: 91.33% \n",
            "SRC: What is the thousands digit of 6297?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.067\n",
            "Validation Accuracy: 94.27%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12300\n",
            "Trainning Loss: 0.096 \n",
            "Trainning Accuracy: 93.33% \n",
            "SRC: What is the ten thousands digit of 11018?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.059\n",
            "Validation Accuracy: 94.27%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12450\n",
            "Trainning Loss: 0.082 \n",
            "Trainning Accuracy: 91.33% \n",
            "SRC: What is the hundreds digit of 29452?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.049\n",
            "Validation Accuracy: 96.18%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12600\n",
            "Trainning Loss: 0.089 \n",
            "Trainning Accuracy: 91.33% \n",
            "SRC: What is the ten millions digit of 1067913170?\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.045\n",
            "Validation Accuracy: 96.82%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12750\n",
            "Trainning Loss: 0.086 \n",
            "Trainning Accuracy: 96.67% \n",
            "SRC: What is the units digit of 19515?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>2\n",
            "<eos>\n",
            "Validation Loss: 0.035\n",
            "Validation Accuracy: 98.73%\n",
            "--------------------------------\n"
          ]
        }
      ],
      "source": [
        "train_loss_3,train_acc_3,val_loss_3,val_acc_3= Training(model=model,train_data_loader=train_data_loader,valid_data_loader=valid_data_loader,optimizer=optimizer,loss_fn=loss_fn)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "TGucr49TA1AL",
        "outputId": "3bd552f8-b880-4751-abff-523156c88354"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "x =  range(0,len(train_loss_3)*150,150)\n",
        "fig, ax = plt.subplots(1,2)\n",
        "fig.set_size_inches(10, 5)\n",
        "fig.tight_layout(pad=3)\n",
        "ax[0].plot(x,train_loss_3,c='blue',label=\"training\")\n",
        "ax[0].plot(x,val_loss_3,c='red',label=\"validation\")\n",
        "ax[0].set(title='Loss Training vs Validation')\n",
        "ax[0].set_xlabel (\"Steps\", fontsize =16)\n",
        "ax[0].set_ylabel (\"Loss\", fontsize =16)\n",
        "ax[1].plot(x,train_acc_3,c='blue',label=\"training\")\n",
        "ax[1].plot(x,val_acc_3,c='red',label=\"validation\")\n",
        "ax[1].set(title='Accuracy Training vs Validation')\n",
        "ax[1].set_xlabel (\"Steps-\", fontsize =16)\n",
        "ax[1].set_ylabel (\"Accuracy\", fontsize =16)\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PqKOcayrA10_",
        "outputId": "4d28e212-58f0-4bf9-a0c0-fa7ca7f39969"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 9 55 95]\n",
            "--------------------------------\n",
            "SRC: What is the millions digit of 51569223?\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>1\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the hundred thousands digit of 89356748?\n",
            "\n",
            "PRED: <sos>3\n",
            "<eos>\n",
            "--------------------------------\n",
            "SRC: What is the hundred thousands digit of 5968224?\n",
            "<pad>\n",
            "PRED: <sos>9\n",
            "<eos>\n"
          ]
        }
      ],
      "source": [
        "\n",
        "rand=np.random.randint(0,100,3)\n",
        "print(rand)\n",
        "\n",
        "\n",
        "for i, (src, tgt) in enumerate(valid_data_loader):\n",
        "\n",
        "    if i in rand :\n",
        "\n",
        "        src_greedy=torch.transpose(src,0,1)\n",
        "        a=model.greedy_search(src_greedy,tgt.size(1),3,2)\n",
        "\n",
        "        sq=[]\n",
        "        tq=[]\n",
        "        print('--------------------------------')\n",
        "        for j in src[0]:\n",
        "            sq.append(src_vocab.id_to_string[j.item()])\n",
        "        print('SRC: '+''.join(sq))\n",
        "\n",
        "        for j in a[0]:\n",
        "            tq.append(trg_vocab.id_to_string[j.item()])\n",
        "        print('PRED: '+''.join(tq))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PyljHLvqN7Zs"
      },
      "outputs": [],
      "source": [
        "#Trainning Compare_Sort\n",
        "gradient_accumulation=10\n",
        "report_every=1000\n",
        "print_every=2000\n",
        "def Training(model,train_data_loader,valid_data_loader,optimizer,loss_fn):\n",
        "    num_epochs=0\n",
        "    model.train()\n",
        "\n",
        "    train_loss=[]\n",
        "    train_acc=[]\n",
        "    val_loss=[]\n",
        "    val_acc=[]\n",
        "    accu_break=0\n",
        "    while (accu_break==0):\n",
        "\n",
        "        running_loss = 0.0\n",
        "        run_step = 0\n",
        "        running_correct=0\n",
        "        running_total=0\n",
        "\n",
        "        for i, (src, tgt) in enumerate(train_data_loader):\n",
        "\n",
        "            tgt_shiftsos=tgt[:,0:tgt.size(1)-1]\n",
        "            tgt_shiftEOS=tgt[:,1:tgt.size(1)]\n",
        "\n",
        "            tgt_shiftsos=torch.transpose(tgt_shiftsos,0,1)\n",
        "            src_model=torch.transpose(src,0,1)\n",
        "\n",
        "            # Move the inputs to the correct device\n",
        "            src = src.to(DEVICE)\n",
        "            tgt = tgt.to(DEVICE)\n",
        "            src_model = src_model.to(DEVICE)\n",
        "\n",
        "            #Zero the Gradients\n",
        "\n",
        "\n",
        "            #Forward pass\n",
        "            out=model(src_model,tgt_shiftsos)\n",
        "\n",
        "            loss = loss_fn(out.permute(1,2,0),tgt_shiftEOS)\n",
        "            # print(\"1: {} 2: {}\".format(out.view(-1, ntoken_tgt).size(),tgt.view(-1).size()))\n",
        "\n",
        "            running_loss=running_loss+loss.item()\n",
        "            loss.backward()\n",
        "\n",
        "\n",
        "            run_step=run_step+1\n",
        "            running_total += src.size(0)\n",
        "\n",
        "            a=model.greedy_search(src_model,tgt.size(1),3)\n",
        "            running_correct+=num_correct(a,tgt,trg_vocab)\n",
        "\n",
        "            if i % gradient_accumulation == 0:\n",
        "                torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)\n",
        "                optimizer.step()\n",
        "                optimizer.zero_grad()\n",
        "\n",
        "\n",
        "            if i % report_every == 0:\n",
        "                acc_train=compute_accuracy(running_correct,run_step)\n",
        "                sq=[]\n",
        "                tq=[]\n",
        "                print('--------------------------------')\n",
        "                print(f'Epoch: {num_epochs} Training Batch {i}')\n",
        "                print(f'Trainning Loss: {running_loss / run_step :.3f} ')\n",
        "                print(f'Trainning Accuracy: { acc_train:.2%} ')\n",
        "\n",
        "\n",
        "\n",
        "                train_loss.append(running_loss / run_step)\n",
        "                train_acc.append(acc_train)\n",
        "\n",
        "                running_correct=0\n",
        "                running_total=0\n",
        "\n",
        "                running_loss = 0.0\n",
        "                run_step = 0\n",
        "\n",
        "                run_step_val=0\n",
        "                run_loss_acum_val=0\n",
        "                running_total_val=0\n",
        "                running_correct_val=0\n",
        "                model.eval()\n",
        "                for j, (src_val, tgt_val)  in enumerate(valid_data_loader):\n",
        "\n",
        "                    tgt_val_sos=tgt_val[:,0:2]\n",
        "                    tgt_val_EOS=tgt_val[:,1:3]\n",
        "\n",
        "                    src_val_model=torch.transpose(src_val,0,1)\n",
        "                    tgt_val_sos=torch.transpose(tgt_val_sos,0,1)\n",
        "\n",
        "                    src_val = src_val.to(DEVICE)\n",
        "                    tgt_val = tgt_val.to(DEVICE)\n",
        "\n",
        "                    out_val=model(src_val_model,tgt_val_sos)\n",
        "\n",
        "                    loss_val = loss_fn(out_val.permute(1,2,0),tgt_val_EOS)\n",
        "                    a=model.greedy_search(src_val_model,tgt_val.size(1),3)\n",
        "                    running_correct_val+=num_correct(a,tgt_val,trg_vocab)\n",
        "                    run_step_val += 1\n",
        "                    run_loss_acum_val += loss_val.item()\n",
        "                    running_total_val += src_val.size(0)\n",
        "                    if j % print_every==0:\n",
        "                      sq=[]\n",
        "                      tq=[]\n",
        "                      for j in src[0]:\n",
        "                          sq.append(src_vocab.id_to_string[j.item()])\n",
        "                      print('SRC: '+''.join(sq))\n",
        "\n",
        "                      for j in a[0]:\n",
        "                        tq.append(trg_vocab.id_to_string[j.item()])\n",
        "                      print('PRED: '+''.join(tq))\n",
        "\n",
        "                acc_val=compute_accuracy(running_correct_val,run_step_val)\n",
        "\n",
        "                print(f'Validation Loss: {run_loss_acum_val / run_step_val :.3f}')\n",
        "                print(f'Validation Accuracy: { acc_val:.2%}')\n",
        "                print('--------------------------------')\n",
        "                val_loss.append(run_loss_acum_val / run_step_val)\n",
        "                val_acc.append(acc_val)\n",
        "\n",
        "                model.train()\n",
        "                if(acc_val> .90 ):\n",
        "                    accu_break=1\n",
        "                    break\n",
        "    return  train_loss,train_acc,val_loss,val_acc\n",
        "\n",
        "\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "InNOgOBMVUTE",
        "outputId": "c982607b-cbcf-43e8-edea-f4862729e85b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "vocab size: 34\n"
          ]
        }
      ],
      "source": [
        "learning_rate = 0.0001\n",
        "\n",
        "ntoken_src = len(src_vocab)\n",
        "ntoken_tgt = len(trg_vocab)\n",
        "\n",
        "# Set the device\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# vocab_size = len(module.vocab.itos)\n",
        "vocab_size = len(src_vocab.id_to_string)\n",
        "print(F\"vocab size: {vocab_size}\")\n",
        "model = TransformerModel(ntoken_src, ntoken_tgt, d_model=256, pad_id=0, encoder_layers=3, decoder_layers=2, dim_feedforward=1024, num_heads=8)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "loss_fn = nn.CrossEntropyLoss(ignore_index=0)\n",
        "model=model.to(DEVICE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "ngzQ-ml5VUel",
        "outputId": "e0fa3ee5-b363-4dd5-badc-61101833f9ee"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "--------------------------------\n",
            "Epoch: 0 Training Batch 0\n",
            "Trainning Loss: 3.157 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 5, 4, -1, 88 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>                                 \n",
            "Validation Loss: 3.065\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 1000\n",
            "Trainning Loss: 1.371 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 34, 6989, 2, -1, 4, 5 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>0, 0.5, 0.4, -1, -3, 5\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.574\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 2000\n",
            "Trainning Loss: 0.919 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put 2, 132/5, 2/31, 2/7 in ascending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 0.3, 0, 1, -0.4, -26\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.384\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 3000\n",
            "Trainning Loss: 0.782 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put -1, 2, 0, -5 in descending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 0.1, 0, 2, -3, -560\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.330\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 4000\n",
            "Trainning Loss: 0.713 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort -1.1, 5, -5/4, -95278, 2/9.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 0.4, 1, 0.2, -3, -65\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.262\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 5000\n",
            "Trainning Loss: 0.676 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 14, -0.2, 118, -21 in decreasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 3, 0.1, 0, -2, -564\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.228\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 6000\n",
            "Trainning Loss: 0.651 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put 0, -21, -0.1, 6/29, -5, -7 in descending order.\n",
            "<pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 3, 0.05, 0, -14, -26\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.211\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 7000\n",
            "Trainning Loss: 0.631 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put -46.833, -0.4, 2/15 in ascending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 0.05, 1, -2, -360\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.198\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 8000\n",
            "Trainning Loss: 0.614 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort -4, -1, 13, 15, -45 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 0.06, 2, -10, -5\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.183\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 9000\n",
            "Trainning Loss: 0.596 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put 0, -2, -6, 1314, -11 in descending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 0.05, 0, -13, -26\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.172\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 10000\n",
            "Trainning Loss: 0.584 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort -5, -2, -2/3 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 3, 0.05, -1, -26\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.167\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 11000\n",
            "Trainning Loss: 0.571 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put -0.1, -0.047, -26, 0, 2/11 in ascending order.\n",
            "<pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 3, 0.05, 0, -126\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.149\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 12000\n",
            "Trainning Loss: 0.561 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 42, 3/7, 2/13 in descending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 3, 0.05, 0, -2, -146\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.141\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 13000\n",
            "Trainning Loss: 0.553 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put 2/6077, -731, 5 in decreasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 3, 0.06, 2, -4, -105\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "Validation Loss: 1.130\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 14000\n",
            "Trainning Loss: 0.543 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 3, 0.1, -6, -4 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>5, 4, 3, 0.05, 0, -126\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.119\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 15000\n",
            "Trainning Loss: 0.536 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Put 3, -4601, 0, -5 in decreasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>15, 3, 2, 0.06, -4, -50\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.112\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 16000\n",
            "Trainning Loss: 0.530 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 1, -4, 3, -1284, 5 in decreasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>15, 3, 0.4, 0, -5, -206\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.101\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 17000\n",
            "Trainning Loss: 0.522 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort -4, 1, -130, -3, -5 in ascending order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>15, 4, 3, 0.06, 0, -25\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.092\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n",
            "--------------------------------\n",
            "Epoch: 0 Training Batch 18000\n",
            "Trainning Loss: 0.517 \n",
            "Trainning Accuracy: 0.00% \n",
            "SRC: Sort 0, 4, -4, 2, -12 in increasing order.\n",
            "<pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\n",
            "PRED: <sos>15, 3, 0.4, 0, -5, -206\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "<eos>\n",
            "\n",
            "Validation Loss: 1.086\n",
            "Validation Accuracy: 0.00%\n",
            "--------------------------------\n"
          ]
        }
      ],
      "source": [
        "train_loss_sort,train_acc_sort,val_loss_sort,val_acc_sort= Training(model=model,train_data_loader=train_data_loader,valid_data_loader=valid_data_loader,optimizer=optimizer,loss_fn=loss_fn)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oW4H1k_wan1w"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "x =  range(0,len(train_loss_sort)*1000,1000)\n",
        "fig, ax = plt.subplots(1,2)\n",
        "fig.set_size_inches(10, 5)\n",
        "fig.tight_layout(pad=3)\n",
        "ax[0].plot(x,train_loss_sort,c='blue',label=\"training\")\n",
        "ax[0].plot(x,val_loss_sort,c='red',label=\"validation\")\n",
        "ax[0].set(title='Loss Training vs Validation')\n",
        "ax[0].set_xlabel (\"Steps\", fontsize =16)\n",
        "ax[0].set_ylabel (\"Loss\", fontsize =16)\n",
        "ax[1].plot(x,train_acc_sort,c='blue',label=\"training\")\n",
        "ax[1].plot(x,val_acc_sort,c='red',label=\"validation\")\n",
        "ax[1].set(title='Accuracy Training vs Validation')\n",
        "ax[1].set_xlabel (\"Steps-\", fontsize =16)\n",
        "ax[1].set_ylabel (\"Accuracy\", fontsize =16)\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BtpOeKGPKm4z"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9IuQYtylC9kv"
      },
      "outputs": [],
      "source": [
        "train_question_stats = get_stats(\"/content/drive/MyDrive/Colab Notebooks/Assignment 4/numbers__place_value/train.x\")\n",
        "train_answer_stats = get_stats(\"/content/drive/MyDrive/Colab Notebooks/Assignment 4/numbers__place_value/train.y\")\n",
        "\n",
        "print(F\"Number of sentences in the Questions: {train_question_stats[0]}\")\n",
        "print(F\"Number of characters in the Questions: {train_question_stats[1]}\")\n",
        "print(F\"Average sentence length in the Questions: {train_question_stats[2]}\")\n",
        "\n",
        "print(F\"Number of sentences in the Answers: {train_answer_stats[0]}\")\n",
        "print(F\"Number of characters in the Answers: {train_answer_stats[1]}\")\n",
        "print(F\"Average sentence length in the Answers: {train_answer_stats[2]}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HEs4Hvn2Dcpu"
      },
      "outputs": [],
      "source": [
        "valid_question_stats = get_stats(\"/content/drive/MyDrive/Colab Notebooks/Assignment 4/numbers__place_value/interpolate.x\")\n",
        "valid_answer_stats = get_stats(\"/content/drive/MyDrive/Colab Notebooks/Assignment 4/numbers__place_value/interpolate.y\")\n",
        "\n",
        "print(F\"Number of sentences in the Questions: {valid_question_stats[0]}\")\n",
        "print(F\"Number of characters in the Questions: {valid_question_stats[1]}\")\n",
        "print(F\"Average sentence length in the Questions: {valid_question_stats[2]}\")\n",
        "\n",
        "print(F\"Number of sentences in the Answers: {valid_answer_stats[0]}\")\n",
        "print(F\"Number of characters in the Answers: {valid_answer_stats[1]}\")\n",
        "print(F\"Average sentence length in the Answers: {valid_answer_stats[2]}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WoX7tOn6FB6z"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
